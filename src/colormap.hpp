#ifndef __COLORMAP_HPP__
#define __COLORMAP_HPP__

#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include "global.hpp"
#include "maths.hpp"

#define COLORMAP_PARULA_SIZE    9
#define COLORMAP_ACCENT_SIZE    8
#define COLORMAP_BLUES_SIZE     8
#define COLORMAP_BRBG_SIZE      8
#define COLORMAP_BUGN_SIZE      8
#define COLORMAP_BUPU_SIZE      8
#define COLORMAP_CHROMAJS_SIZE  9
#define COLORMAP_DARK2_SIZE     8
#define COLORMAP_GNBU_SIZE      8
#define COLORMAP_WHGNBU_SIZE    8
#define COLORMAP_GNPU_SIZE      10
#define COLORMAP_GREENS_SIZE    8
#define COLORMAP_GREYS_SIZE     8
#define COLORMAP_ORANGES_SIZE   8
#define COLORMAP_ORRD_SIZE      8
#define COLORMAP_PAIRED_SIZE    8
#define COLORMAP_PASTEL1_SIZE   8
#define COLORMAP_PASTEL2_SIZE   8
#define COLORMAP_PIYG_SIZE      8
#define COLORMAP_PRGN_SIZE      8
#define COLORMAP_PUBUGN_SIZE    8
#define COLORMAP_PUBU_SIZE      8
#define COLORMAP_PUOR_SIZE      8
#define COLORMAP_PURD_SIZE      8
#define COLORMAP_PURPLES_SIZE   8
#define COLORMAP_RDBU_SIZE      8
#define COLORMAP_RDGY_SIZE      8
#define COLORMAP_RDPU_SIZE      8
#define COLORMAP_RDYLBU_SIZE    8
#define COLORMAP_RDYLGN_SIZE    8
#define COLORMAP_REDS_SIZE      8
#define COLORMAP_SAND_SIZE      10
#define COLORMAP_SET1_SIZE      8
#define COLORMAP_SET2_SIZE      8
#define COLORMAP_SET3_SIZE      8
#define COLORMAP_SPECTRAL_SIZE  8
#define COLORMAP_WHYLRD_SIZE    5
#define COLORMAP_YLGNBU_SIZE    8
#define COLORMAP_YLGN_SIZE      8
#define COLORMAP_YLORBR_SIZE    8
#define COLORMAP_YLORRD_SIZE    8
#define COLORMAP_YLRD_SIZE      4

namespace Lurdr
{

enum COLORMAP_TYPE
{
    COLORMAP_PARULA,
    COLORMAP_ACCENT,
    COLORMAP_BLUES,
    COLORMAP_BRBG,
    COLORMAP_BUGN,
    COLORMAP_BUPU,
    COLORMAP_CHROMAJS,
    COLORMAP_DARK2,
    COLORMAP_GNBU,
    COLORMAP_WHGNBU,
    COLORMAP_GNPU,
    COLORMAP_GREENS,
    COLORMAP_GREYS,
    COLORMAP_ORANGES,
    COLORMAP_ORRD,
    COLORMAP_PAIRED,
    COLORMAP_PASTEL1,
    COLORMAP_PASTEL2,
    COLORMAP_PIYG,
    COLORMAP_PRGN,
    COLORMAP_PUBUGN,
    COLORMAP_PUBU,
    COLORMAP_PUOR,
    COLORMAP_PURD,
    COLORMAP_PURPLES,
    COLORMAP_RDBU,
    COLORMAP_RDGY,
    COLORMAP_RDPU,
    COLORMAP_RDYLBU,
    COLORMAP_RDYLGN,
    COLORMAP_REDS,
    COLORMAP_SAND,
    COLORMAP_SET1,
    COLORMAP_SET2,
    COLORMAP_SET3,
    COLORMAP_SPECTRAL,
    COLORMAP_WHYLRD,
    COLORMAP_YLGNBU,
    COLORMAP_YLGN,
    COLORMAP_YLORBR,
    COLORMAP_YLORRD,
    COLORMAP_YLRD,
    COLORMAP_NUM
};

// colormap value from : https://github.com/jgreitemann/colormap
const Vector3 parula_colormap[COLORMAP_PARULA_SIZE] =
{
    Vector3(0x35, 0x2a, 0x87),
    Vector3(0x03, 0x63, 0xe1),
    Vector3(0x14, 0x85, 0xd4),
    Vector3(0x06, 0xa7, 0xc6),
    Vector3(0x38, 0xb9, 0x9e),
    Vector3(0x92, 0xbf, 0x73),
    Vector3(0xd9, 0xba, 0x56),
    Vector3(0xfc, 0xce, 0x2e),
    Vector3(0xf9, 0xfb, 0x0e),
};

const Vector3 accent_colormap[COLORMAP_ACCENT_SIZE] =
{
    Vector3(0x7f, 0xc9, 0x7f),
    Vector3(0xbe, 0xae, 0xd4),
    Vector3(0xfd, 0xc0, 0x86),
    Vector3(0xff, 0xff, 0x99),
    Vector3(0x38, 0x6c, 0xb0),
    Vector3(0xf0, 0x02, 0x7f),
    Vector3(0xbf, 0x5b, 0x17),
    Vector3(0x66, 0x66, 0x66),
};

const Vector3 blues_colormap[COLORMAP_BLUES_SIZE] =
{
    Vector3(0xf7, 0xfb, 0xff),
    Vector3(0xde, 0xeb, 0xf7),
    Vector3(0xc6, 0xdb, 0xef),
    Vector3(0x9e, 0xca, 0xe1),
    Vector3(0x6b, 0xae, 0xd6),
    Vector3(0x42, 0x92, 0xc6),
    Vector3(0x21, 0x71, 0xb5),
    Vector3(0x08, 0x45, 0x94),
};

const Vector3 brbg_colormap[COLORMAP_BRBG_SIZE] =
{
    Vector3(0x8c, 0x51, 0x0a),
    Vector3(0xbf, 0x81, 0x2d),
    Vector3(0xdf, 0xc2, 0x7d),
    Vector3(0xf6, 0xe8, 0xc3),
    Vector3(0xc7, 0xea, 0xe5),
    Vector3(0x80, 0xcd, 0xc1),
    Vector3(0x35, 0x97, 0x8f),
    Vector3(0x01, 0x66, 0x5e),
};

const Vector3 bugn_colormap[COLORMAP_BUGN_SIZE] =
{
    Vector3(0xf7, 0xfc, 0xfd),
    Vector3(0xe5, 0xf5, 0xf9),
    Vector3(0xcc, 0xec, 0xe6),
    Vector3(0x99, 0xd8, 0xc9),
    Vector3(0x66, 0xc2, 0xa4),
    Vector3(0x41, 0xae, 0x76),
    Vector3(0x23, 0x8b, 0x45),
    Vector3(0x00, 0x58, 0x24)
};

const Vector3 bupu_colormap[COLORMAP_BUPU_SIZE] =
{
    Vector3(0xf7, 0xfc, 0xfd),
    Vector3(0xe0, 0xec, 0xf4),
    Vector3(0xbf, 0xd3, 0xe6),
    Vector3(0x9e, 0xbc, 0xda),
    Vector3(0x8c, 0x96, 0xc6),
    Vector3(0x8c, 0x6b, 0xb1),
    Vector3(0x88, 0x41, 0x9d),
    Vector3(0x6e, 0x01, 0x6b),
};

const Vector3 chromajs_colormap[COLORMAP_CHROMAJS_SIZE] =
{
    Vector3(0xff, 0xff, 0xe0),
    Vector3(0xff, 0xdf, 0xb8),
    Vector3(0xff, 0xbc, 0x94),
    Vector3(0xff, 0x97, 0x77),
    Vector3(0xff, 0x69, 0x62),
    Vector3(0xee, 0x42, 0x56),
    Vector3(0xd2, 0x1f, 0x47),
    Vector3(0xb0, 0x06, 0x2c),
    Vector3(0x8b, 0x00, 0x00),
};

const Vector3 dark2_colormap[COLORMAP_DARK2_SIZE] =
{
    Vector3(0x1b, 0x9e, 0x77),
    Vector3(0xd9, 0x5f, 0x02),
    Vector3(0x75, 0x70, 0xb3),
    Vector3(0xe7, 0x29, 0x8a),
    Vector3(0x66, 0xa6, 0x1e),
    Vector3(0xe6, 0xab, 0x02),
    Vector3(0xa6, 0x76, 0x1d),
    Vector3(0x66, 0x66, 0x66),
};

const Vector3 gnbu_colormap[COLORMAP_GNBU_SIZE] =
{
    Vector3(0xf7, 0xfc, 0xf0),
    Vector3(0xe0, 0xf3, 0xdb),
    Vector3(0xcc, 0xeb, 0xc5),
    Vector3(0xa8, 0xdd, 0xb5),
    Vector3(0x7b, 0xcc, 0xc4),
    Vector3(0x4e, 0xb3, 0xd3),
    Vector3(0x2b, 0x8c, 0xbe),
    Vector3(0x08, 0x58, 0x9e),
};

const Vector3 whgnbu_colormap[COLORMAP_WHGNBU_SIZE] =
{
    Vector3(0xff, 0xff, 0xff),
    Vector3(0xe0, 0xf3, 0xdb),
    Vector3(0xcc, 0xeb, 0xc5),
    Vector3(0xa8, 0xdd, 0xb5),
    Vector3(0x7b, 0xcc, 0xc4),
    Vector3(0x4e, 0xb3, 0xd3),
    Vector3(0x2b, 0x8c, 0xbe),
    Vector3(0x08, 0x58, 0x9e),
};

const Vector3 gnpu_colormap[COLORMAP_GNPU_SIZE] =
{
    Vector3(0x39, 0x63, 0x53),
    Vector3(0x0d, 0xb1, 0x4b),
    Vector3(0x6d, 0xc0, 0x67),
    Vector3(0xab, 0xd6, 0x9b),
    Vector3(0xda, 0xea, 0xc1),
    Vector3(0xdf, 0xcc, 0xe4),
    Vector3(0xc7, 0xb2, 0xd6),
    Vector3(0x94, 0x74, 0xb4),
    Vector3(0x75, 0x40, 0x98),
    Vector3(0x50, 0x49, 0x71),
};

const Vector3 greens_colormap[COLORMAP_GREENS_SIZE] =
{
    Vector3(0xf7, 0xfc, 0xf5),
    Vector3(0xe5, 0xf5, 0xe0),
    Vector3(0xc7, 0xe9, 0xc0),
    Vector3(0xa1, 0xd9, 0x9b),
    Vector3(0x74, 0xc4, 0x76),
    Vector3(0x41, 0xab, 0x5d),
    Vector3(0x23, 0x8b, 0x45),
    Vector3(0x00, 0x5a, 0x32),
};

const Vector3 greys_colormap[COLORMAP_GREYS_SIZE] =
{
    Vector3(0xff, 0xff, 0xff),
    Vector3(0xf0, 0xf0, 0xf0),
    Vector3(0xd9, 0xd9, 0xd9),
    Vector3(0xbd, 0xbd, 0xbd),
    Vector3(0x96, 0x96, 0x96),
    Vector3(0x73, 0x73, 0x73),
    Vector3(0x52, 0x52, 0x52),
    Vector3(0x25, 0x25, 0x25),
};

const Vector3 oranges_colormap[COLORMAP_ORANGES_SIZE] =
{
    Vector3(0xff, 0xf5, 0xeb),
    Vector3(0xfe, 0xe6, 0xce),
    Vector3(0xfd, 0xd0, 0xa2),
    Vector3(0xfd, 0xae, 0x6b),
    Vector3(0xfd, 0x8d, 0x3c),
    Vector3(0xf1, 0x69, 0x13),
    Vector3(0xd9, 0x48, 0x01),
    Vector3(0x8c, 0x2d, 0x04),
};

const Vector3 orrd_colormap[COLORMAP_ORRD_SIZE] =
{
    Vector3(0xff, 0xf7, 0xec),
    Vector3(0xfe, 0xe8, 0xc8),
    Vector3(0xfd, 0xd4, 0x9e),
    Vector3(0xfd, 0xbb, 0x84),
    Vector3(0xfc, 0x8d, 0x59),
    Vector3(0xef, 0x65, 0x48),
    Vector3(0xd7, 0x30, 0x1f),
    Vector3(0x99, 0x00, 0x00),
};

const Vector3 paired_colormap[COLORMAP_PAIRED_SIZE] =
{
    Vector3(0xa6, 0xce, 0xe3),
    Vector3(0x1f, 0x78, 0xb4),
    Vector3(0xb2, 0xdf, 0x8a),
    Vector3(0x33, 0xa0, 0x2c),
    Vector3(0xfb, 0x9a, 0x99),
    Vector3(0xe3, 0x1a, 0x1c),
    Vector3(0xfd, 0xbf, 0x6f),
    Vector3(0xff, 0x7f, 0x00),
};

const Vector3 pastel1_colormap[COLORMAP_PASTEL1_SIZE] =
{
    Vector3(0xfb, 0xb4, 0xae),
    Vector3(0xb3, 0xcd, 0xe3),
    Vector3(0xcc, 0xeb, 0xc5),
    Vector3(0xde, 0xcb, 0xe4),
    Vector3(0xfe, 0xd9, 0xa6),
    Vector3(0xff, 0xff, 0xcc),
    Vector3(0xe5, 0xd8, 0xbd),
    Vector3(0xfd, 0xda, 0xec),
};

const Vector3 pastel2_colormap[COLORMAP_PASTEL2_SIZE] =
{
    Vector3(0xb3, 0xe2, 0xcd),
    Vector3(0xfd, 0xcd, 0xac),
    Vector3(0xcd, 0xb5, 0xe8),
    Vector3(0xf4, 0xca, 0xe4),
    Vector3(0xd6, 0xf5, 0xc9),
    Vector3(0xff, 0xf2, 0xae),
    Vector3(0xf1, 0xe2, 0xcc),
    Vector3(0xcc, 0xcc, 0xcc),
};

const Vector3 piyg_colormap[COLORMAP_PIYG_SIZE] =
{
    Vector3(0xc5, 0x1b, 0x7d),
    Vector3(0xde, 0x77, 0xae),
    Vector3(0xf1, 0xb6, 0xda),
    Vector3(0xfd, 0xe0, 0xef),
    Vector3(0xe6, 0xf5, 0xd0),
    Vector3(0xb8, 0xe1, 0x86),
    Vector3(0x7f, 0xbc, 0x41),
    Vector3(0x4d, 0x92, 0x21),
};

const Vector3 prgn_colormap[COLORMAP_PRGN_SIZE] =
{
    Vector3(0x76, 0x2a, 0x83),
    Vector3(0x99, 0x70, 0xab),
    Vector3(0xc2, 0xa5, 0xcf),
    Vector3(0xe7, 0xd4, 0xe8),
    Vector3(0xd9, 0xf0, 0xd3),
    Vector3(0xa6, 0xdb, 0xa0),
    Vector3(0x5a, 0xae, 0x61),
    Vector3(0x1b, 0x78, 0x37),
};

const Vector3 pubugn_colormap[COLORMAP_PUBUGN_SIZE] =
{
    Vector3(0xff, 0xf7, 0xfb),
    Vector3(0xec, 0xe7, 0xf0),
    Vector3(0xd0, 0xd1, 0xe6),
    Vector3(0xa6, 0xbd, 0xdb),
    Vector3(0x67, 0xa9, 0xcf),
    Vector3(0x36, 0x90, 0xc0),
    Vector3(0x02, 0x81, 0x8a),
    Vector3(0x01, 0x65, 0x40),
};

const Vector3 pubu_colormap[COLORMAP_PUBU_SIZE] =
{
    Vector3(0xff, 0xf7, 0xfb),
    Vector3(0xec, 0xe7, 0xf2),
    Vector3(0xd0, 0xd1, 0xe6),
    Vector3(0xa6, 0xbd, 0xdb),
    Vector3(0x74, 0xa9, 0xcf),
    Vector3(0x36, 0x90, 0xc0),
    Vector3(0x05, 0x70, 0xb0),
    Vector3(0x03, 0x4e, 0x7b),
};

const Vector3 puor_colormap[COLORMAP_PUOR_SIZE] =
{
    Vector3(0xb3, 0x58, 0x06),
    Vector3(0xe0, 0x82, 0x14),
    Vector3(0xfd, 0xb8, 0x63),
    Vector3(0xfe, 0xe0, 0xb6),
    Vector3(0xd8, 0xda, 0xeb),
    Vector3(0xb2, 0xab, 0xd2),
    Vector3(0x80, 0x73, 0xac),
    Vector3(0x54, 0x27, 0x88),
};

const Vector3 purd_colormap[COLORMAP_PURD_SIZE] =
{
    Vector3(0xf7, 0xf4, 0xf9),
    Vector3(0xe7, 0xe1, 0xef),
    Vector3(0xd4, 0xb9, 0xda),
    Vector3(0xc9, 0x94, 0xc7),
    Vector3(0xdf, 0x65, 0xb0),
    Vector3(0xe7, 0x29, 0x8a),
    Vector3(0xce, 0x12, 0x56),
    Vector3(0x91, 0x00, 0x3f),
};

const Vector3 purples_colormap[COLORMAP_PURPLES_SIZE] =
{
    Vector3(0xfc, 0xfb, 0xfd),
    Vector3(0xef, 0xed, 0xf5),
    Vector3(0xda, 0xda, 0xeb),
    Vector3(0xbc, 0xbd, 0xdc),
    Vector3(0x9e, 0x9a, 0xc8),
    Vector3(0x80, 0x7d, 0xba),
    Vector3(0x6a, 0x51, 0xa3),
    Vector3(0x4a, 0x14, 0x86),
};

const Vector3 rdbu_colormap[COLORMAP_RDBU_SIZE] =
{
    Vector3(0xb2, 0x18, 0x2b),
    Vector3(0xd6, 0x60, 0x4d),
    Vector3(0xf4, 0xa5, 0x82),
    Vector3(0xfd, 0xdb, 0xc7),
    Vector3(0xd1, 0xe5, 0xf0),
    Vector3(0x92, 0xc5, 0xde),
    Vector3(0x43, 0x93, 0xc3),
    Vector3(0x21, 0x66, 0xac),
};

const Vector3 rdgy_colormap[COLORMAP_RDGY_SIZE] =
{
    Vector3(0xb2, 0x18, 0x2b),
    Vector3(0xd6, 0x60, 0x4d),
    Vector3(0xf4, 0xa5, 0x82),
    Vector3(0xfd, 0xdb, 0xc7),
    Vector3(0xe0, 0xe0, 0xe0),
    Vector3(0xba, 0xba, 0xba),
    Vector3(0x87, 0x87, 0x87),
    Vector3(0x4d, 0x4d, 0x4d),
};

const Vector3 rdpu_colormap[COLORMAP_RDPU_SIZE] =
{
    Vector3(0xff, 0xf7, 0xf3),
    Vector3(0xfd, 0xe0, 0xdd),
    Vector3(0xfc, 0xc5, 0xc0),
    Vector3(0xfa, 0x9f, 0xb5),
    Vector3(0xf7, 0x68, 0xa1),
    Vector3(0xdd, 0x34, 0x97),
    Vector3(0xae, 0x01, 0x7e),
    Vector3(0x7a, 0x01, 0x77),
};

const Vector3 rdylbu_colormap[COLORMAP_RDYLBU_SIZE] =
{
    Vector3(0xd7, 0x30, 0x27),
    Vector3(0xf4, 0x6d, 0x43),
    Vector3(0xfd, 0xae, 0x61),
    Vector3(0xfe, 0xe0, 0x90),
    Vector3(0xe0, 0xf3, 0xf8),
    Vector3(0xab, 0xd9, 0xe9),
    Vector3(0x74, 0xad, 0xd1),
    Vector3(0x45, 0x75, 0xb4),
};

const Vector3 rdylgn_colormap[COLORMAP_RDYLGN_SIZE] =
{
    Vector3(0xd7, 0x30, 0x27),
    Vector3(0xf4, 0x6d, 0x43),
    Vector3(0xfd, 0xae, 0x61),
    Vector3(0xfe, 0xe0, 0x8b),
    Vector3(0xd9, 0xef, 0x8b),
    Vector3(0xa6, 0xd9, 0x6a),
    Vector3(0x66, 0xbd, 0x63),
    Vector3(0x1a, 0x98, 0x50),
};

const Vector3 reds_colormap[COLORMAP_REDS_SIZE] =
{
    Vector3(0xff, 0xf5, 0xf0),
    Vector3(0xfe, 0xe0, 0xd2),
    Vector3(0xfc, 0xbb, 0xa1),
    Vector3(0xfc, 0x92, 0x72),
    Vector3(0xfb, 0x6a, 0x4a),
    Vector3(0xef, 0x3b, 0x2c),
    Vector3(0xcb, 0x18, 0x1d),
    Vector3(0x99, 0x00, 0x0d),
};

const Vector3 sand_colormap[COLORMAP_SAND_SIZE] =
{
    Vector3(0x60, 0x48, 0x60),
    Vector3(0x78, 0x48, 0x60),
    Vector3(0xa8, 0x60, 0x60),
    Vector3(0xc0, 0x78, 0x60),
    Vector3(0xf0, 0xa8, 0x48),
    Vector3(0xf8, 0xca, 0x8c),
    Vector3(0xfe, 0xec, 0xae),
    Vector3(0xff, 0xf4, 0xc2),
    Vector3(0xff, 0xf7, 0xdb),
    Vector3(0xff, 0xfc, 0xf6),
};

const Vector3 set1_colormap[COLORMAP_SET1_SIZE] =
{
    Vector3(0xe4, 0x1a, 0x1c),
    Vector3(0x37, 0x7e, 0xb8),
    Vector3(0x4d, 0xaf, 0x4a),
    Vector3(0x98, 0x4e, 0xa3),
    Vector3(0xff, 0x7f, 0x00),
    Vector3(0xff, 0xff, 0x33),
    Vector3(0xa6, 0x56, 0x28),
    Vector3(0xf7, 0x81, 0xbf),
};

const Vector3 set2_colormap[COLORMAP_SET2_SIZE] =
{
    Vector3(0x66, 0xc2, 0xa5),
    Vector3(0xfc, 0x8d, 0x62),
    Vector3(0x8d, 0xa0, 0xcb),
    Vector3(0xe7, 0x8a, 0xc3),
    Vector3(0xa6, 0xd8, 0x54),
    Vector3(0xff, 0xd9, 0x2f),
    Vector3(0xe5, 0xc4, 0x94),
    Vector3(0xb3, 0xb3, 0xb3),
};

const Vector3 set3_colormap[COLORMAP_SET3_SIZE] =
{
    Vector3(0x8d, 0xd3, 0xc7),
    Vector3(0xff, 0xff, 0xb3),
    Vector3(0xbe, 0xba, 0xda),
    Vector3(0xfb, 0x80, 0x72),
    Vector3(0x80, 0xb1, 0xd3),
    Vector3(0xfd, 0xb4, 0x62),
    Vector3(0xb3, 0xde, 0x69),
    Vector3(0xfc, 0xcd, 0xe5),
};

const Vector3 spectral_colormap[COLORMAP_SPECTRAL_SIZE] =
{
    Vector3(0xd5, 0x3e, 0x4f),
    Vector3(0xf4, 0x6d, 0x43),
    Vector3(0xfd, 0xae, 0x61),
    Vector3(0xfe, 0xe0, 0x8b),
    Vector3(0xe6, 0xf5, 0x98),
    Vector3(0xab, 0xdd, 0xa4),
    Vector3(0x66, 0xc2, 0xa5),
    Vector3(0x32, 0x88, 0xbd),
};

const Vector3 whylrd_colormap[COLORMAP_WHYLRD_SIZE] =
{
    Vector3(0xff, 0xff, 0xff),
    Vector3(0xff, 0xee, 0x00),
    Vector3(0xff, 0x70, 0x00),
    Vector3(0xee, 0x00, 0x00),
    Vector3(0x7f, 0x00, 0x00),
};

const Vector3 ylgnbu_colormap[COLORMAP_YLGNBU_SIZE] =
{
    Vector3(0xff, 0xff, 0xd9),
    Vector3(0xed, 0xf8, 0xb1),
    Vector3(0xc7, 0xe9, 0xb4),
    Vector3(0x7f, 0xcd, 0xbb),
    Vector3(0x41, 0xb6, 0xc4),
    Vector3(0x1d, 0x91, 0xc0),
    Vector3(0x22, 0x5e, 0xa8),
    Vector3(0x0c, 0x2c, 0x84),
};

const Vector3 ylgn_colormap[COLORMAP_YLGN_SIZE] =
{
    Vector3(0xff, 0xff, 0xe5),
    Vector3(0xf7, 0xfc, 0xb9),
    Vector3(0xd9, 0xf0, 0xa3),
    Vector3(0xad, 0xdd, 0x8e),
    Vector3(0x78, 0xc6, 0x79),
    Vector3(0x41, 0xab, 0x5d),
    Vector3(0x23, 0x84, 0x43),
    Vector3(0x00, 0x5a, 0x32),
};

const Vector3 ylorbr_colormap[COLORMAP_YLORBR_SIZE] =
{
    Vector3(0xff, 0xff, 0xe5),
    Vector3(0xff, 0xf7, 0xbc),
    Vector3(0xfe, 0xe3, 0x91),
    Vector3(0xfe, 0xc4, 0x4f),
    Vector3(0xfe, 0x99, 0x29),
    Vector3(0xec, 0x70, 0x14),
    Vector3(0xcc, 0x4c, 0x02),
    Vector3(0x8c, 0x2d, 0x04),
};

const Vector3 ylorrd_colormap[COLORMAP_YLORRD_SIZE] =
{
    Vector3(0xff, 0xff, 0xcc),
    Vector3(0xff, 0xed, 0xa0),
    Vector3(0xfe, 0xd9, 0x76),
    Vector3(0xfe, 0xb2, 0x4c),
    Vector3(0xfd, 0x8d, 0x3c),
    Vector3(0xfc, 0x4e, 0x2a),
    Vector3(0xe3, 0x1a, 0x1c),
    Vector3(0xb1, 0x00, 0x26),
};

const Vector3 ylrd_colormap[COLORMAP_YLRD_SIZE] =
{
    Vector3(0xff, 0xee, 0x00),
    Vector3(0xff, 0x70, 0x00),
    Vector3(0xee, 0x00, 0x00),
    Vector3(0x7f, 0x00, 0x00),
};

RGBCOLOR getColorFromScheme(float percentage, const Vector3 * colormap, int map_size);
RGBCOLOR getColorMap(float value, float lower, float upper, COLORMAP_TYPE type);

}

#endif